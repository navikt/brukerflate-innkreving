/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as KravoversiktImport } from './routes/kravoversikt'
import { Route as IndexImport } from './routes/index'
import { Route as KravoversiktResultatImport } from './routes/kravoversikt.resultat'

// Create/Update Routes

const KravoversiktRoute = KravoversiktImport.update({
  id: '/kravoversikt',
  path: '/kravoversikt',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const KravoversiktResultatRoute = KravoversiktResultatImport.update({
  id: '/resultat',
  path: '/resultat',
  getParentRoute: () => KravoversiktRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/kravoversikt': {
      id: '/kravoversikt'
      path: '/kravoversikt'
      fullPath: '/kravoversikt'
      preLoaderRoute: typeof KravoversiktImport
      parentRoute: typeof rootRoute
    }
    '/kravoversikt/resultat': {
      id: '/kravoversikt/resultat'
      path: '/resultat'
      fullPath: '/kravoversikt/resultat'
      preLoaderRoute: typeof KravoversiktResultatImport
      parentRoute: typeof KravoversiktImport
    }
  }
}

// Create and export the route tree

interface KravoversiktRouteChildren {
  KravoversiktResultatRoute: typeof KravoversiktResultatRoute
}

const KravoversiktRouteChildren: KravoversiktRouteChildren = {
  KravoversiktResultatRoute: KravoversiktResultatRoute,
}

const KravoversiktRouteWithChildren = KravoversiktRoute._addFileChildren(
  KravoversiktRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/kravoversikt': typeof KravoversiktRouteWithChildren
  '/kravoversikt/resultat': typeof KravoversiktResultatRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/kravoversikt': typeof KravoversiktRouteWithChildren
  '/kravoversikt/resultat': typeof KravoversiktResultatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/kravoversikt': typeof KravoversiktRouteWithChildren
  '/kravoversikt/resultat': typeof KravoversiktResultatRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/kravoversikt' | '/kravoversikt/resultat'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/kravoversikt' | '/kravoversikt/resultat'
  id: '__root__' | '/' | '/kravoversikt' | '/kravoversikt/resultat'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  KravoversiktRoute: typeof KravoversiktRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  KravoversiktRoute: KravoversiktRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/kravoversikt"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/kravoversikt": {
      "filePath": "kravoversikt.tsx",
      "children": [
        "/kravoversikt/resultat"
      ]
    },
    "/kravoversikt/resultat": {
      "filePath": "kravoversikt.resultat.tsx",
      "parent": "/kravoversikt"
    }
  }
}
ROUTE_MANIFEST_END */
